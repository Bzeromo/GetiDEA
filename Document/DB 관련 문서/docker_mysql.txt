docker run --name testMySQL -e MYSQL_ROOT_PASSWORD=1234 -d mysql:8.0.35-oracle

docker run --name testMySQL -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=1234 -d mysql:8.0.35-oracle

docker run --name testMySQL -e MYSQL_ROOT_PASSWORD=1234 -p 3306:3306 -d mysql:8.0.35-oracle

Docker를 이용하여 MySQL 서버를 실행하는 방법은 간단합니다. 다음은 기본적인 단계입니다:

1. **MySQL 도커 이미지 받기**: Docker Hub에서 공식 MySQL 이미지를 pull합니다.

```sh
docker pull mysql
```

2. **MySQL 컨테이너 실행**: 컨테이너를 실행하고, 필요한 환경 변수(예: `MYSQL_ROOT_PASSWORD`)를 설정합니다.

```sh
docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag
```

여기서 `some-mysql`은 컨테이너의 이름이고, `my-secret-pw`는 루트 사용자의 비밀번호입니다. `tag` 부분은 특정 MySQL 버전을 지정할 수 있습니다(예: `5.7`, `8.0`).

3. **데이터 저장을 위한 볼륨 사용**: 데이터 영속성을 위해 Docker 볼륨을 사용할 수 있습니다. 이는 컨테이너를 삭제해도 데이터가 유지되도록 합니다.

```sh
docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql
```

여기서 `/my/own/datadir`은 호스트 시스템의 디렉토리로, MySQL 데이터 파일을 저장하는 데 사용됩니다.

4. **포트 매핑**: 호스트와 컨테이너 간의 포트를 매핑하여 외부에서 MySQL 서버에 접근할 수 있게 할 수 있습니다.

```sh
docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 3306:3306 -d mysql
```

이 명령은 호스트의 3306 포트를 컨테이너의 3306 포트에 매핑합니다.

5. **컨테이너 상태 확인**: 컨테이너가 실행 중인지 확인합니다.

```sh
docker ps
```

6. **MySQL 서버에 접속**: Docker 컨테이너 내의 MySQL 서버에 접속합니다.

```sh
docker exec -it some-mysql mysql -u root -p
```

이 명령은 실행 중인 MySQL 컨테이너 내부에서 MySQL 클라이언트를 실행하며, `-u root`는 사용자 이름을, `-p`는 비밀번호 입력을 요청합니다.

MySQL 서버에 접속한 후에는 일반적인 MySQL 명령어를 사용하여 데이터베이스 관리 작업을 수행할 수 있습니다.

도커를 사용하여 MySQL 서버를 설정하고 운영할 때는 보안 설정, 백업 전략, 성능 최적화 등 추가적인 고려 사항들이 있습니다.

MySQL Workbench를 사용하여 Docker에서 실행 중인 MySQL 서버에 연결하려면 몇 가지 단계를 따라야 합니다. 아래는 연결 프로세스를 안내하는 단계입니다:

1. **Docker 컨테이너 포트 확인**: Docker에서 실행 중인 MySQL 컨테이너가 호스트 시스템의 특정 포트에 바인딩되어 있는지 확인해야 합니다. `docker ps` 명령어를 사용하여 포트를 확인할 수 있습니다.

```sh
docker ps
```

이 명령의 출력에서 `PORTS` 부분을 확인하면 `3306/tcp`과 같이 표시됩니다. 만약 컨테이너를 `-p` 옵션과 함께 시작했다면, `0.0.0.0:3306->3306/tcp` 같은 방식으로 호스트의 포트와 컨테이너의 포트가 매핑된 것을 볼 수 있습니다.

2. **MySQL Workbench 실행**: MySQL Workbench를 열고 "Database" 메뉴에서 "Connect to Database"를 선택합니다.

3. **연결 설정 입력**: 연결 설정 창에서 다음 정보를 입력합니다:
   - **Connection Name**: 연결에 대한 이름을 자유롭게 지정합니다.
   - **Connection Method**: "Standard (TCP/IP)"를 선택합니다.
   - **Hostname**: Docker MySQL 컨테이너가 바인딩된 호스트의 IP 주소나 `localhost`를 입력합니다.
   - **Port**: Docker MySQL 컨테이너가 사용하는 포트 번호를 입력합니다 (기본적으로 3306).
   - **Username**: MySQL 서버의 사용자 이름을 입력합니다 (예: `root`).
   - **Password**: "Store in Vault..."를 선택하고 MySQL 서버의 비밀번호를 저장할 수 있습니다.

4. **Test Connection**: 설정이 올바른지 확인하기 위해 "Test Connection"을 클릭합니다. 필요한 경우 저장한 비밀번호를 입력하라는 메시지가 나타날 수 있습니다.

5. **연결**: 테스트 연결이 성공하면 "OK"를 클릭하여 연결을 저장하고 닫은 후, 생성된 연결 프로파일을 더블 클릭하여 MySQL 서버에 연결합니다.

6. **편집 및 관리**: 연결이 성공하면 MySQL Workbench를 사용하여 데이터베이스를 편집하고 관리할 수 있습니다. 데이터베이스 쿼리를 실행하거나 스키마를 관리하는 등의 작업을 할 수 있습니다.

도커 컨테이너를 외부에서 접근할 수 있도록 설정하지 않았다면, 위의 단계에 따라 컨테이너를 재시작하면서 호스트 시스템의 포트를 컨테이너 포트에 바인딩해야 할 수도 있습니다.